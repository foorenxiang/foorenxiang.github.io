{"version":3,"sources":["utils/stripHTMLFromString.js","utils/fetchTools.js","utils/constants.js","utils/isURL.js","localData/localNotesManifest.js","localData/PythonDesignPatterns.js","styles/button.js","screens/MainPage/Menu.js","utils/returnUniqueArray.js","styles/container.js","screens/MainPage/index.js","screens/ViewerPage/markdownHighlighter.js","utils/platformDetector.js","screens/ViewerPage/MarkdownRenderer.js","screens/ViewerPage/index.js","App.js","web-build/register-service-worker.js"],"names":["removeTags","str","toString","replace","logError","err","url","console","error","fetchText","a","async","fetch","response","text","fetchJSON","json","fetchNoteSubjects","noteSubject","data","notes","title","startCase","URI","RegExp","test","fileExtensionFromURL","splitURLFragments","split","length","toLowerCase","fetchMarkdownData","markdownURL","markdownData","stripHTMLFromString","languageNameFromExtension","providedExt","providedExtWithPeriod","sourceFileExtensionDescriptors","isExtensionInDescriptorObject","descriptorObject","extensions","find","ext","detectedExtensionName","name","fetchSourceFile","fileExtension","sourceFileText","language","sourceFileTextAsMarkdown","MARKDOWN_CODEBLOCK","appendSource","getMarkdownData","fetchNotesData","notesData","localNotes","StyleSheet","create","container","paddingTop","paddingBottom","minWidth","MenuButtons","titles","onlineNotes","onPressHandler","map","View","style","buttonStyles","key","Button","onPress","button","viewerCallback","useState","setOnlineNotes","useEffect","onlineNoteSubjects","useEffectCallback","ScrollView","menuStyles","array","mergedNotesTitles","Object","keys","Set","selectedTitle","flex","alignItems","justifyContent","navigation","SafeAreaView","styles","Menu","viewerData","push","code","node","inline","className","children","props","match","exec","highlightingStyle","PreTag","String","OS","Platform","isNativeDevice","components","highlighter","route","params","contentInsetAdjustmentBehavior","contentContainerStyle","paddingHorizontal","MarkdownRenderer","Stack","createStackNavigator","App","NavigationContainer","Navigator","screenOptions","headerTitleStyle","alignSelf","headerBackTitleStyle","Screen","component","MainPage","options","Viewer","navigator","window","addEventListener","serviceWorker","register","scope","then","info","catch"],"mappings":"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","file":"static/js/app.419fde17.chunk.js","sourcesContent":["'use strict';\n\n// referenced from https://www.geeksforgeeks.org/how-to-strip-out-html-tags-from-a-string-using-javascript/#:~:text=To%20strip%20out%20all%20the,innerText%20property%20from%20HTML%20DOM.\n\nexport default function removeTags(str) {\n  if (str === null || str === '') return '';\n  else str = str.toString();\n\n  // Regular expression to identify HTML tags in\n  // the input string. Replacing the identified\n  // HTML tag with a null string.\n  return str.replace(/(<([^>]+)>)/gi, '');\n}\n","'use strict';\n\nimport {\n  SERVED_NOTES_URL,\n  NOTES_REPOSITORY_URL,\n  LANGUAGE_EXTENSIONS_DESCRIPTORS_URL,\n} from './constants';\nimport startCase from 'lodash.startcase';\nimport isURL from './isURL';\nimport stripHTMLFromString from './stripHTMLFromString';\n\nconst logError = (err, url) => {\n  console.error(err);\n  console.error(`Failed to load data from ${url}`);\n};\n\nexport const fetchText = async (url) => {\n  try {\n    const response = await fetch(url);\n    return response.text();\n  } catch (err) {\n    logError(err, url);\n    return '';\n  }\n};\n\nexport const fetchJSON = async (url) => {\n  try {\n    const response = await fetch(url);\n    return await response.json();\n  } catch (err) {\n    logError(err, url);\n    return {};\n  }\n};\n\nexport const fetchNoteSubjects = async () => {\n  const data = await fetchJSON(SERVED_NOTES_URL);\n  const notes = {};\n  for (const noteSubject in data) {\n    const title = startCase(noteSubject);\n    const URI = data[noteSubject];\n    const url = isURL(URI) ? URI : `${NOTES_REPOSITORY_URL}${URI}`;\n    notes[noteSubject] = {\n      title,\n      url,\n    };\n  }\n  return notes;\n};\n\nconst fileExtensionFromURL = (url) => {\n  const splitURLFragments = url.split('.');\n  const last_index = splitURLFragments.length - 1;\n  const ext = splitURLFragments[last_index].toLowerCase();\n  return ext;\n};\n\nconst fetchMarkdownData = async (markdownURL) => {\n  const markdownData = await fetchText(markdownURL);\n  return stripHTMLFromString(markdownData);\n};\n\nconst languageNameFromExtension = async (providedExt) => {\n  const providedExtWithPeriod = `.${providedExt}`;\n\n  const sourceFileExtensionDescriptors = await fetchJSON(LANGUAGE_EXTENSIONS_DESCRIPTORS_URL);\n\n  const isExtensionInDescriptorObject = (descriptorObject) => {\n    return 'extensions' in descriptorObject\n      ? !!descriptorObject.extensions.find((ext) => providedExtWithPeriod === ext)\n      : false;\n  };\n\n  const detectedExtensionName = sourceFileExtensionDescriptors.find((descriptorObject) =>\n    isExtensionInDescriptorObject(descriptorObject)\n  )?.name;\n\n  return detectedExtensionName;\n};\n\nconst fetchSourceFile = async (url, fileExtension) => {\n  const sourceFileText = await fetchText(url);\n\n  const language = await languageNameFromExtension(fileExtension);\n\n  const sourceFileTextAsMarkdown = (sourceFileText) => {\n    const MARKDOWN_CODEBLOCK = '```';\n\n    const title = language\n      ? `### ${language}${' source file'} (.${fileExtension})\\n`\n      : `### .${fileExtension}${' source file'} \\n`;\n    const markdownCodeblockPrefix = `${MARKDOWN_CODEBLOCK} ${language}\\n`;\n    const markdownCodeblockSuffix = MARKDOWN_CODEBLOCK;\n    return `${title}${markdownCodeblockPrefix}${sourceFileText}${markdownCodeblockSuffix}`;\n  };\n\n  return sourceFileTextAsMarkdown(sourceFileText);\n};\n\nconst appendSource = (url, markdownData) => `From source: ${url}\\n${markdownData}`;\n\nconst getMarkdownData = async (url) => {\n  const fileExtension = fileExtensionFromURL(url);\n  return fileExtension === 'md'\n    ? await fetchMarkdownData(url)\n    : await fetchSourceFile(url, fileExtension);\n};\n\nexport const fetchNotesData = async (url) => {\n  const notesData = appendSource(url, await getMarkdownData(url));\n  return notesData;\n};\n","'use strict';\n\nexport const SERVED_NOTES_URL = 'https://foorenxiang.github.io/static/servedNotes.json';\nexport const NOTES_REPOSITORY_URL = 'https://raw.githubusercontent.com/foorenxiang/notes/main/';\nexport const LANGUAGE_EXTENSIONS_DESCRIPTORS_URL =\n  'https://gist.githubusercontent.com/foorenxiang/510c312f129b98a677329fd5d491e4e5/raw/211547723b4621a622fc56978d74aa416cbd1729/Programming_Languages_Extensions.json';\n","'use strict';\n\nexport default (str) => {\n  const pattern = new RegExp(\n    '^(https?:\\\\/\\\\/)?' + // protocol\n      '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|' + // domain name\n      '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))' + // OR ip (v4) address\n      '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*' + // port and path\n      '(\\\\?[;&a-z\\\\d%_.~+=-]*)?' + // query string\n      '(\\\\#[-a-z\\\\d_]*)?$',\n    'i'\n  ); // fragment locator\n  return !!pattern.test(str);\n};\n","import PythonDesignPatterns from './PythonDesignPatterns.js';\n\nconst localNotes = {\n  'Python Design Patterns': PythonDesignPatterns,\n};\n\nexport default localNotes;\n","export default `## **Design Pattern Notes from [Linkedin Learning](https://www.linkedin.com/learning/python-design-patterns)**\n<br/>\n\n# Creational Patterns\n\n## Factory\n### Problem:\n1. Uncertainties in types of objects\n2. Decisions on what classes to be used can only be made at runtime\n<!-- Codeblock start -->\n\\`\\`\\` python\nclass Dog:\n\n    \"\"\"A simple dog class\"\"\"\n\n    def __init__(self, name):\n        self._name = name\n\n    def speak(self):\n        return \"Woof!\"\n\n\nclass Cat:\n\n    \"\"\"A simple dog class\"\"\"\n\n    def __init__(self, name):\n        self._name = name\n\n    def speak(self):\n        return \"Meow!\"\n\n\ndef get_pet(pet=\"dog\"):\n\n    \"\"\"The factory method\"\"\"\n    \"\"\"Document the classes created that this factory method can use to instantiate new objects\"\"\"\n    \"\"\"To create a new object, just call this pattern and pass in the desired class as its input argument\"\"\"\n\n    \"\"\"this dict constructor is used to keep a manifest of classes and its desired constructors that can be accessed\"\"\"\n    pets = dict(dog=Dog(\"Hope\"), cat=Cat(\"Peace\"))\n\n    return pets[pet]\n\n\n\"\"\" Call the factory method to create new objects\"\"\"\nd = get_pet(\"dog\")\n\nprint(d.speak())\n\nc = get_pet(\"cat\")\n\nprint(c.speak())\n\\`\\`\\`\n<!-- Codeblock end -->\n<br/>\n<br/>\n\n\n# Abstract Factory\n### Problem:\n1. User expectation yields **multiple**, related objects\n\n### Solution:\n1. Abstract factory e.g. pet factory\n2. Concrete factory e.g. dog factory and cat factory\n3. Abstract product\n4. Concrete product: dog and dog food; cat and cat food\n<!-- Codeblock start -->\n\\`\\`\\` python\nclass Dog:\n    \"\"\"One of the objects to be returned\"\"\"\n\n    def speak(self):\n        return \"Woof!\"\n\n    def __str__(self):\n        return \"Dog\"\n\n\nclass DogFactory:\n    \"\"\"Concrete Factory\"\"\"\n\n    def get_pet(self):\n        \"\"\"Returns a Dog object\"\"\"\n        return Dog()\n\n    def get_food(self):\n        \"\"\"Returns a Dog Food object\"\"\"\n        return \"Dog Food!\"\n\n\nclass PetStore:\n    \"\"\"PetStore houses our Abstract Factory\"\"\"\n    \"\"\"Used to invoke methods in the concrete factory that is passed into this abstract factory's constructor\"\"\"\n    \"\"\"Essentially acting as an interface\"\"\"\n\n    def __init__(self, pet_factory=None):\n        \"\"\"pet_factory is our Abstract Factory\"\"\"\n\n        self._pet_factory = pet_factory\n\n    def show_pet(self):\n        \"\"\"Utility method to display the details of the objects retured by the DogFactory\"\"\"\n\n        pet = self._pet_factory.get_pet()\n        pet_food = self._pet_factory.get_food()\n\n        print(\"Our pet is '{}'!\".format(pet))\n        print(\"Our pet says hello by '{}'\".format(pet.speak()))\n        print(\"Its food is '{}'!\".format(pet_food))\n\n\n# Create a Concrete Factory\nfactory = DogFactory()\n\n# Create a pet store housing our Abstract Factory\nshop = PetStore(factory)\n\n# Invoke the utility method to show the details of our pet\nshop.show_pet()\n\n\\`\\`\\`\n<!-- Codeblock end -->\n<br/>\n<br/>\n\n\n## Singleton\n### Problem:\n1. Only one instance to be instantiated form a class\n2. Create global variable in an objected-oriented way using a singleton\n### Solution:\n1. Module\n   1. Shared by multiple objects\n2. Borg design pattern\n<!-- Codeblock start -->\n\\`\\`\\` python\nclass Borg:\n    \"\"\"The Borg pattern makes the class attributes global\"\"\"\n\n    _shared_data = {}  # Attribute dictionary\n\n    def __init__(self):\n        self.__dict__ = self._shared_data  # Make it an attribute dictionary\n\n\nclass Singleton(Borg):  # Inherits from the Borg class\n    \"\"\"This class now shares all its attributes among its various instances\"\"\"\n\n    # This essenstially makes the singleton objects an object-oriented global variable\n\n    def __init__(self, **kwargs):\n        Borg.__init__(self)\n        self._shared_data.update(\n            kwargs\n        )  # Update the attribute dictionary by inserting a new key-value pair\n\n    def __str__(self):\n        return str(self._shared_data)  # Returns the attribute dictionary for printing\n\n\n# Let's create a singleton object and add our first acronym\nx = Singleton(HTTP=\"Hyper Text Transfer Protocol\")\n# Print the object\nprint(x)\n\n# Let's create another singleton object and if it refers to the same attribute dictionary by adding another acronym.\ny = Singleton(SNMP=\"Simple Network Management Protocol\")\n# Print the object\nprint(y)\n\n\\`\\`\\`\n<!-- Codeblock end -->\n<br/>\n<br/>\n\n\n## Builder\n### Problem:\n1. Excessive number of constructors\n\n### Solution:\n1. Director\n2. Abstract Builder: interfaces\n3. Concrete Builder: implements the interfaces\n4. Product: object being built\n<!-- Codeblock start -->\n\\`\\`\\` python\nclass Director:\n    \"\"\"Director\"\"\"\n\n    def __init__(self, builder):\n        self._builder = builder\n\n    def construct_car(self):\n        self._builder.create_new_car()\n        self._builder.add_model()\n        self._builder.add_tires()\n        self._builder.add_engine()\n\n    def get_car(self):\n        return self._builder.car\n\n\nclass Builder:\n    \"\"\"Abstract Builder\"\"\"\n\n    def __init__(self):\n        self.car = None\n\n    def create_new_car(self):\n        self.car = Car()\n\n\nclass SkyLarkBuilder(Builder):\n    \"\"\"Concrete Builder --> provides parts and tools to work on the parts\"\"\"\n\n    def add_model(self):\n        self.car.model = \"Skylark\"\n\n    def add_tires(self):\n        self.car.tires = \"Regular tires\"\n\n    def add_engine(self):\n        self.car.engine = \"Turbo engine\"\n\n\nclass Car:\n    \"\"\"Product\"\"\"\n\n    def __init__(self):\n        self.model = None\n        self.tires = None\n        self.engine = None\n\n    def __str__(self):\n        return \"{} | {} | {}\".format(self.model, self.tires, self.engine)\n\n\nbuilder = SkyLarkBuilder()\ndirector = Director(builder)\ndirector.construct_car()\ncar = director.get_car()\nprint(car)\n\n\\`\\`\\`\n<!-- Codeblock end -->\n<br/>\n<br/>\n\n\n##  \n### Problem:\n1. Creating many identical objects individually becomes expensive\n2. Cloning could be a good alternative to creating individual objects one at a time\n### Solution:\n1. Creating a prototypical **instance** first\n2. Simply clone the prototypical instance whenever a replica is needed\n<!-- Codeblock start -->\n\\`\\`\\` python\nimport copy\n\n\nclass Prototype:\n    def __init__(self):\n        self._objects = {}\n\n    def register_object(self, name, obj):\n        \"\"\"Register object to be cloned\"\"\"\n        self._objects[name] = obj\n\n    def unregister_object(self, name):\n        \"\"\"Unregister an object\"\"\"\n        del self._objects[name]\n\n    def clone(self, name, **attr):\n        \"\"\"Clone a registered object and update its attributes\"\"\"\n        obj = copy.deepcopy(self._objects.get(name))\n        obj.__dict__.update(attr)\n        return obj\n\n\nclass Car:\n    def __init__(self):\n        self.name = \"Skylark\"\n        self.color = \"Red\"\n        self.options = \"Ex\"\n\n    def __str__(self):\n        return \"{} | {} | {}\".format(self.name, self.color, self.options)\n\n\nc = Car()\nprototype = Prototype()\nprototype.register_object(\"skylark\", c)\n\nc1 = prototype.clone(\"skylark\")\n\nprint(c1)\n\n\\`\\`\\`\n<!-- Codeblock end -->\n<br/>\n<br/>\n\n# Structural Patterns\n\n## Decorator\n### Problem:\n1. Need to add new features to existing object\n\n### Solution:\n1. Functions, use built-in decorator feature\n<!-- Codeblock start -->\n\\`\\`\\` python\nfrom functools import wraps\n\n\ndef make_blink(function):\n    \"\"\"Defines the decorator\"\"\"\n\n    # This makes the decorator transparent in terms of its name and docstring\n    @wraps(function)\n\n    # Define the inner function\n    def decorator():\n        # Grab the return value of the function being decorated\n        ret = function()\n\n        # Add new functionality to the function being decorated\n        return \"<blink>\" + ret + \"</blink>\"\n\n    return decorator\n\n\n# Apply the decorator here!\n@make_blink\ndef hello_world():\n    \"\"\"Original function!\"\"\"\n\n    return \"Hello, World!\"\n\n\n# Check the result of decorating\nprint(hello_world())\n\n# Check if the function name is still the same name of the function being decorated\nprint(hello_world.__name__)\n\n# Check if the docstring is still the same as that of the function being decorated\nprint(hello_world.__doc__)\n\n\\`\\`\\`\n<!-- Codeblock end -->\n<br/>\n<br/>\n\n\n## Proxy\n### Problem:\n1. Postpone object creation until absolutely necessary\n2. Find a placeholder\n\n### Solution:\n1. Clients: interacting with a proxy\n2. Proxy: responsible for creating the resource intensive objects\n<!-- Codeblock start -->\n\\`\\`\\` python\nimport time\n\n\nclass Producer:\n    \"\"\"Define the 'resource-intensive' object to instantiate!\"\"\"\n\n    def produce(self):\n        print(\"Producer is working hard!\")\n\n    def meet(self):\n        print(\"Producer has time to meet you now!\")\n\n\nclass Proxy:\n    \"\"\" \"Define the 'relatively less resource-intensive' proxy to instantiate as a middleman\"\"\"\n\n    def __init__(self):\n        self.occupied = \"No\"\n        self.producer = None\n\n    def produce(self):\n        \"\"\"Check if Producer is available\"\"\"\n        print(\"Artist checking if Producer is available ...\")\n\n        if self.occupied == \"No\":\n            # If the producer is available, create a producer object!\n            self.producer = Producer()\n            time.sleep(2)\n\n            # Make the prodcuer meet the guest!\n            self.producer.meet()\n\n        else:\n            # Otherwise, don't instantiate a producer\n            time.sleep(2)\n            print(\"Producer is busy!\")\n\n\n# Instantiate a Proxy\np = Proxy()\n\n# Make the proxy: Artist produce until Producer is available\np.produce()\n\n# Change the state to 'occupied'\np.occupied = \"Yes\"\n\n# Make the Producer produce\np.produce()\n\n\\`\\`\\`\n<!-- Codeblock end -->\n<br/>\n<br/>\n\n\n## Adapter\n### Problem:\n\n### Solution:\n<!-- Codeblock start -->\n\\`\\`\\` python\nclass Korean:\n    \"\"\"Korean speaker\"\"\"\n\n    def __init__(self):\n        self.name = \"Korean\"\n\n    def speak_korean(self):\n        return \"An-neyong?\"\n\n\nclass British:\n    \"\"\"English speaker\"\"\"\n\n    def __init__(self):\n        self.name = \"British\"\n\n    # Note the different method name here!\n    def speak_english(self):\n        return \"Hello!\"\n\n\nclass Adapter:\n    \"\"\"This changes the generic method name to individualized method names\"\"\"\n\n    def __init__(self, object, **adapted_method):\n        \"\"\"Change the name of the method\"\"\"\n        self._object = object\n\n        # Add a new dictionary item that establishes the mapping between the generic method name: speak() and the concrete method\n        # For example, speak() will be translated to speak_korean() if the mapping says so\n        self.__dict__.update(adapted_method)\n\n    def __getattr__(self, attr):\n        \"\"\"Simply return the rest of attributes!\"\"\"\n        return getattr(self._object, attr)\n\n\n# List to store speaker objects\nobjects = []\n\n# Create a Korean object\nkorean = Korean()\n\n# Create a British object\nbritish = British()\n\n# Append the objects to the objects list\nobjects.append(Adapter(korean, speak=korean.speak_korean))\nobjects.append(Adapter(british, speak=british.speak_english))\n\n\nfor obj in objects:\n    print(\"{} says '{}'\\n\".format(obj.name, obj.speak()))\n\n\\`\\`\\`\n<!-- Codeblock end -->\n<br/>\n<br/>\n\n\n## Composite\n### Problem:\n\n### Solution:\n<!-- Codeblock start -->\n\\`\\`\\` python\nclass Component(object):\n    \"\"\"Abstract class\"\"\"\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def component_function(self):\n        pass\n\n\nclass Child(Component):  # Inherits from the abstract class, Component\n    \"\"\"Concrete class\"\"\"\n\n    def __init__(self, *args, **kwargs):\n        Component.__init__(self, *args, **kwargs)\n\n        # This is where we store the name of your child item!\n        self.name = args[0]\n\n    def component_function(self):\n        # Print the name of your child item here!\n        print(\"{}\".format(self.name))\n\n\nclass Composite(Component):  # Inherits from the abstract class, Component\n    \"\"\"Concrete class and maintains the tree recursive structure\"\"\"\n\n    def __init__(self, *args, **kwargs):\n        Component.__init__(self, *args, **kwargs)\n\n        # This is where we store the name of the composite object\n        self.name = args[0]\n\n        # This is where we keep our child items\n        self.children = []\n\n    def append_child(self, child):\n        \"\"\"Method to add a new child item\"\"\"\n        self.children.append(child)\n\n    def remove_child(self, child):\n        \"\"\"Method to remove a child item\"\"\"\n        self.children.remove(child)\n\n    def component_function(self):\n\n        # Print the name of the composite object\n        print(\"{}\".format(self.name))\n\n        # Iterate through the child objects and invoke their component function printing their names\n        for i in self.children:\n            i.component_function()\n\n\n# Build a composite submenu 1\nsub1 = Composite(\"submenu1\")\n\n# Create a new child sub_submenu 11\nsub11 = Child(\"sub_submenu 11\")\n# Create a new Child sub_submenu 12\nsub12 = Child(\"sub_submenu 12\")\n\n# Add the sub_submenu 11 to submenu 1\nsub1.append_child(sub11)\n# Add the sub_submenu 12 to submenu 1\nsub1.append_child(sub12)\n\n# Build a top-level composite menu\ntop = Composite(\"top_menu\")\n\n# Build a submenu 2 that is not a composite\nsub2 = Child(\"submenu2\")\n\n# Add the composite submenu 1 to the top-level composite menu\ntop.append_child(sub1)\n\n# Add the plain submenu 2 to the top-level composite menu\ntop.append_child(sub2)\n\n# Let's test if our Composite pattern works!\ntop.component_function()\n\n\\`\\`\\`\n<!-- Codeblock end -->\n<br/>\n<br/>\n\n\n## Bridge\n### Problem:\n\n### Solution:\n<!-- Codeblock start -->\n\\`\\`\\` python\nclass DrawingAPIOne(object):\n    \"\"\"Implementation-specific abstraction: concrete class one\"\"\"\n\n    def draw_circle(self, x, y, radius):\n        print(\"API 1 drawing a circle at ({}, {} with radius {}!)\".format(x, y, radius))\n\n\nclass DrawingAPITwo(object):\n    \"\"\"Implementation-specific abstraction: concrete class two\"\"\"\n\n    def draw_circle(self, x, y, radius):\n        print(\"API 2 drawing a circle at ({}, {} with radius {}!)\".format(x, y, radius))\n\n\nclass Circle(object):\n    \"\"\"Implementation-independent abstraction: for example, there could be a rectangle class!\"\"\"\n\n    def __init__(self, x, y, radius, drawing_api):\n        \"\"\"Initialize the necessary attributes\"\"\"\n        self._x = x\n        self._y = y\n        self._radius = radius\n        self._drawing_api = drawing_api\n\n    def draw(self):\n        \"\"\"Implementation-specific abstraction taken care of by another class: DrawingAPI\"\"\"\n        self._drawing_api.draw_circle(self._x, self._y, self._radius)\n\n    def scale(self, percent):\n        \"\"\"Implementation-independent\"\"\"\n        self._radius *= percent\n\n\n# Build the first Circle object using API One\ncircle1 = Circle(1, 2, 3, DrawingAPIOne())\n# Draw a circle\ncircle1.draw()\n\n# Build the second Circle object using API Two\ncircle2 = Circle(2, 3, 4, DrawingAPITwo())\n# Draw a circle\ncircle2.draw()\n\n\\`\\`\\`\n<!-- Codeblock end -->\n<br/>\n<br/>\n\n# Behavioral Patterns\n\n## Observer\n### Problem:\n\n### Solution:\n<!-- Codeblock start -->\n\\`\\`\\` python\nclass Subject(object):  # Represents what is being 'observed'\n    def __init__(self):\n        self._observers = (\n            []\n        )  # This where references to all the observers are being kept\n        # Note that this is a one-to-many relationship: there will be one subject to be observed by multiple _observers\n\n    def attach(self, observer):\n        if (\n            observer not in self._observers\n        ):  # If the observer is not already in the observers list\n            self._observers.append(observer)  # append the observer to the list\n\n    def detach(self, observer):  # Simply remove the observer\n        try:\n            self._observers.remove(observer)\n        except ValueError:\n            pass\n\n    def notify(self, modifier=None):\n        for observer in self._observers:  # For all the observers in the list\n            if (\n                modifier != observer\n            ):  # Don't notify the observer who is actually updating the temperature\n                observer.update(self)  # Alert the observers!\n\n\nclass Core(Subject):  # Inherits from the Subject class\n    def __init__(self, name=\"\"):\n        Subject.__init__(self)\n        self._name = name  # Set the name of the core\n        self._temp = 0  # Initialize the temperature of the core\n\n    @property  # Getter that gets the core temperature\n    def temp(self):\n        return self._temp\n\n    @temp.setter  # Setter that sets the core temperature\n    def temp(self, temp):\n        self._temp = temp\n        self.notify()  # Notify the observers whenever somebody changes the core temperature\n\n\nclass TempViewer:\n    def update(\n        self, subject\n    ):  # Alert method that is invoked when the notify() method in a concrete subject is invoked\n        print(\n            \"Temperature Viewer: {} has Temperature {}\".format(\n                subject._name, subject._temp\n            )\n        )\n\n\n# Let's create our subjects\nc1 = Core(\"Core 1\")\nc2 = Core(\"Core 2\")\n\n# Let's create our observers\nv1 = TempViewer()\nv2 = TempViewer()\n\n# Let's attach our observers to the first core\nc1.attach(v1)\nc1.attach(v2)\n\n# Let's change the temperature of our first core\nc1.temp = 80\nc1.temp = 90\n\n\\`\\`\\`\n<!-- Codeblock end -->\n<br/>\n<br/>\n\n\n## Visitor\n### Problem:\n\n### Solution:\n<!-- Codeblock start -->\n\\`\\`\\` python\nclass House(object):  # The class being visited\n    def accept(self, visitor):\n        \"\"\"Interface to accept a visitor\"\"\"\n        visitor.visit(self)  # Triggers the visiting operation!\n\n    def work_on_hvac(self, hvac_specialist):\n        print(\n            self, \"worked on by\", hvac_specialist\n        )  # Note that we now have a reference to the HVAC specialist object in the house object!\n\n    def work_on_electricity(self, electrician):\n        print(\n            self, \"worked on by\", electrician\n        )  # Note that we now have a reference to the electrician object in the house object!\n\n    def __str__(self):\n        \"\"\"Simply return the class name when the House object is printed\"\"\"\n        return self.__class__.__name__\n\n\nclass Visitor(object):\n    \"\"\"Abstract visitor\"\"\"\n\n    def __str__(self):\n        \"\"\"Simply return the class name when the Visitor object is printed\"\"\"\n        return self.__class__.__name__\n\n\nclass HvacSpecialist(Visitor):  # Inherits from the parent class, Visitor\n    \"\"\"Concrete visitor: HVAC specialist\"\"\"\n\n    def visit(self, house):\n        house.work_on_hvac(\n            self\n        )  # Note that the visitor now has a reference to the house object\n\n\nclass Electrician(Visitor):  # Inherits from the parent class, Visitor\n    \"\"\"Concrete visitor: electrician\"\"\"\n\n    def visit(self, house):\n        house.work_on_electricity(\n            self\n        )  # Note that the visitor now has a reference to the house object\n\n\n# Create an HVAC specialist\nhv = HvacSpecialist()\n# Create an electrician\ne = Electrician()\n\n# Create a house\nhome = House()\n\n# Let the house accept the HVAC specialist and work on the house by invoking the visit() method\nhome.accept(hv)\n\n# Let the house accept the electrician and work on the house by invoking the visit() method\nhome.accept(e)\n\n\\`\\`\\`\n<!-- Codeblock end -->\n<br/>\n<br/>\n\n\n## Iterator\n### Problem:\n\n### Solution:\n<!-- Codeblock start -->\n\\`\\`\\` python\ndef count_to(count):\n    \"\"\"Our iterator implementation\"\"\"\n\n    # Our list\n    numbers_in_german = [\"eins\", \"zwei\", \"drei\", \"vier\", \"funf\"]\n\n    # Our built-in iterator\n    # Creates a tuple such as (1, \"eins\")\n    iterator = zip(range(count), numbers_in_german)\n\n    # Iterate through our iterable list\n    # Extract the German numbers\n    # Put them in a generator called number\n    for position, number in iterator:\n\n        # Returns a 'generator' containing numbers in German\n        yield number\n\n\n# Let's test the generator returned by our iterator\nfor num in count_to(3):\n    print(\"{}\".format(num))\n\nfor num in count_to(4):\n    print(\"{}\".format(num))\n\n\\`\\`\\`\n<!-- Codeblock end -->\n<br/>\n<br/>\n\n\n## Strategy\n### Problem:\n\n### Solution:\n<!-- Codeblock start -->\n\\`\\`\\` python\nimport types  # Import the types module\n\n\nclass Strategy:\n    \"\"\"The Strategy Pattern class\"\"\"\n\n    def __init__(self, function=None):\n        self.name = \"Default Strategy\"\n\n        # If a reference to a function is provided, replace the execute() method with the given function\n        if function:\n            self.execute = types.MethodType(function, self)\n\n    def execute(\n        self,\n    ):  # This gets replaced by another version if another strategy is provided.\n        \"\"\"The defaut method that prints the name of the strategy being used\"\"\"\n        print(\"{} is used!\".format(self.name))\n\n\n# Replacement method 1\ndef strategy_one(self):\n    print(\"{} is used to execute method 1\".format(self.name))\n\n\n# Replacement method 2\ndef strategy_two(self):\n    print(\"{} is used to execute method 2\".format(self.name))\n\n\n# Let's create our default strategy\ns0 = Strategy()\n# Let's execute our default strategy\ns0.execute()\n\n# Let's create the first varition of our default strategy by providing a new behavior\ns1 = Strategy(strategy_one)\n# Let's set its name\ns1.name = \"Strategy One\"\n# Let's execute the strategy\ns1.execute()\n\ns2 = Strategy(strategy_two)\ns2.name = \"Strategy Two\"\ns2.execute()\n\n\\`\\`\\`\n<!-- Codeblock end -->\n<br/>\n<br/>\n\n\n## Chain of responsibility\n### Problem:\n\n### Solution:\n<!-- Codeblock start -->\n\\`\\`\\` python\nclass Handler:  # Abstract handler\n    \"\"\"Abstract Handler\"\"\"\n\n    def __init__(self, successor):\n        self._successor = successor  # Define who is the next handler\n\n    def handle(self, request):\n        handled = self._handle(request)  # If handled, stop here\n\n        # Otherwise, keep going\n        if not handled:\n            self._successor.handle(request)\n\n    def _handle(self, request):\n        raise NotImplementedError(\"Must provide implementation in subclass!\")\n\n\nclass ConcreteHandler1(Handler):  # Inherits from the abstract handler\n    \"\"\"Concrete handler 1\"\"\"\n\n    def _handle(self, request):\n        if 0 < request <= 10:  # Provide a condition for handling\n            print(\"Request {} handled in handler 1\".format(request))\n            return True  # Indicates that the request has been handled\n\n\nclass DefaultHandler(Handler):  # Inherits from the abstract handler\n    \"\"\"Default handler\"\"\"\n\n    def _handle(self, request):\n        \"\"\"If there is no handler available\"\"\"\n        # No condition checking since this is a default handler\n        print(\"End of chain, no handler for {}\".format(request))\n        return True  # Indicates that the request has been handled\n\n\nclass Client:  # Using handlers\n    def __init__(self):\n        self.handler = ConcreteHandler1(\n            DefaultHandler(None)\n        )  # Create handlers and use them in a sequence you want\n        # Note that the default handler has no successor\n\n    def delegate(\n        self, requests\n    ):  # Send your requests one at a time for handlers to handle\n        for request in requests:\n            self.handler.handle(request)\n\n\n# Create a client\nc = Client()\n\n# Create requests\nrequests = [2, 5, 30]\n\n# Send the requests\nc.delegate(requests)\n\n\\`\\`\\`\n<!-- Codeblock end -->\n<br/>\n<br/>\n\n# Design Best Practices\n\n# Consistency\n# Other qualities\n\n## **Advanced Design Pattern Notes from [Linkedin Learning](https://www.linkedin.com/learning/python-advanced-design-patterns)**\n<br/>\n\n## Facade\n### Problem:\n\n### Solution:\n<!-- Codeblock start -->\n\\`\\`\\` python\nclass SubsystemA:\n\n\tdef method1(self):\n\t\tprint('SubsystemA method1 ...')\n\t\t\n\tdef method2(self):\n\t\tprint('SubsystemA method2 ...')\n\nclass SubsystemB:\n\t\n\tdef method1(self):\n\t\tprint('SubsystemB method1 ...')\n\t\t\n\tdef method2(self):\n\t\tprint('SubsystemB method2 ...')\n\nclass Facade:\n\n\tdef __init__(self):\n\t\tself._subsystem_A = SubsystemA()\n\t\tself._subsystem_B = SubsystemB()\n\n\tdef method(self):\n\t\tself._subsystem_A.method1()\n\t\tself._subsystem_A.method2()\n\t\t\n\t\tself._subsystem_B.method1()\n\t\tself._subsystem_B.method2()\n\ndef main():\n\tfacade = Facade()\n\tfacade.method()\n\nif __name__ == \"__main__\":\n\tmain()\n\n\\`\\`\\`\n<!-- Codeblock end -->\n<br/>\n<br/>\n\n## Command\n### Problem:\n\n### Solution:\n<!-- Codeblock start -->\n\\`\\`\\` python\nclass Command:\n\tdef execute(self):\n\t\tpass\n\nclass Copy(Command):\n\tdef execute(self):\n\t\tprint(\"Copying ...\")\n\nclass Paste(Command):\n\tdef execute(self):\n\t\tprint(\"Pasting ...\")\n\nclass Save(Command):\n\tdef execute(self):\n\t\tprint(\"Saving ...\")\n\nclass Macro:\n\tdef __init__(self):\n\t\tself.commands = []\n\n\tdef add(self, command):\n\t\tself.commands.append(command)\n\n\tdef run(self):\n\t\tfor o in self.commands:\n\t\t\to.execute()\n\ndef main():\n\tmacro = Macro()\n\tmacro.add(Copy())\n\tmacro.add(Paste())\n\tmacro.add(Save())\n\tmacro.run()\n\nif __name__ == \"__main__\":\n\tmain()\n\n\\`\\`\\`\n<!-- Codeblock end -->\n<br/>\n<br/>\n\n## Interpreter\n### Problem:\n\n### Solution:\n<!-- Codeblock start -->\n\\`\\`\\` python\nfrom abc import ABC, abstractmethod\n\nclass AbstractExpression():\n\n\t@abstractmethod\n\tdef interpret(self):\n\t\tpass\n\nclass NonterminalExpression(AbstractExpression):\n\n\tdef __init__(self, expression):\n\t\tself._expression = expression\n\n\tdef interpret(self):\n\t\tprint(\"Non-terminal expression being interpreted ...\")\n\t\tself._expression.interpret()\n\nclass TerminalExpression(AbstractExpression):\n\n\tdef interpret(self):\n\t\tprint(\"Terminal expression being interpreted ...\")\n\ndef main():\n\n\tast = NonterminalExpression(NonterminalExpression(TerminalExpression()))\n\tast.interpret()\n\nif __name__ == \"__main__\":\n\tmain()\n\n\\`\\`\\`\n<!-- Codeblock end -->\n<br/>\n<br/>\n\n## Mediator\n### Problem:\n\n### Solution:\n<!-- Codeblock start -->\n\\`\\`\\` python\nimport sys\n\nclass Colleague(object):\n\tdef __init__(self, mediator, id):\n\t\tself._mediator = mediator\n\t\tself._id = id\n\n\tdef getID(self):\n\t\treturn self._id\n\n\tdef send(self, msg):\n\t\tpass\n\n\tdef receive(self, msg):\n\t\tpass\n\nclass ConcreteColleague(Colleague):\n\tdef __init__(self, mediator, id):\n\t\tsuper().__init__(mediator, id)\n\n\tdef send(self, msg):\n\t\tprint(\"Message '\" + msg + \"' sent by Colleague \" + str(self._id))\n\t\tself._mediator.distribute(self, msg)\n\n\tdef receive(self, msg):\n\t\tprint(\"Message '\" + msg + \"' received by Colleague \" + str(self._id))\n\n\nclass Mediator:\n\tdef add(self, colleague):\n\t\tpass\n\n\tdef distribute(self, sender, msg):\n\t\tpass\n\nclass ConcreteMediator(Mediator):\n\tdef __init__(self):\n\t\tMediator.__init__(self)\n\t\tself._colleague = []\n\n\tdef add(self, colleague):\n\t\tself._colleague.append(colleague)\n\n\tdef distribute(self, sender, msg):\n\t\tfor colleague in self._colleague:\n\t\t\tif colleague.getID() != sender.getID():\n\t\t\t\tcolleague.receive(msg)\n\n\ndef main():\n\tmediator = ConcreteMediator()\n\n\tc1 = ConcreteColleague(mediator, 1)\n\tc2 = ConcreteColleague(mediator, 2)\n\tc3 = ConcreteColleague(mediator, 3)\n\n\tmediator.add(c1)\n\tmediator.add(c2)\n\tmediator.add(c3)\n\n\tc1.send(\"Good Morning!\")\n\nif __name__ == \"__main__\":\n\tmain()\n\n\\`\\`\\`\n<!-- Codeblock end -->\n<br/>\n<br/>\n\n## Memento\n### Problem:\n\n### Solution:\n<!-- Codeblock start -->\n\\`\\`\\` python\nimport pickle\n\nclass Originator:\n\n\tdef __init__(self):\n\t\tself._state = None\n\n\tdef create_memento(self):\n\t\treturn pickle.dumps(vars(self))\n\n\tdef set_memento(self, memento):\n\t\tprevious_state = pickle.loads(memento)\n\t\tvars(self).clear\n\t\tvars(self).update(previous_state)\n\ndef main():\n\toriginator = Originator()\n\n\tprint(vars(originator))\n\n\tmemento = originator.create_memento()\n\t\n\toriginator._state = True\n\n\tprint(vars(originator))\n\n\toriginator.set_memento(memento)\n\n\tprint(vars(originator))\n\nif __name__ == \"__main__\":\n\tmain()\n\n\\`\\`\\`\n<!-- Codeblock end -->\n<br/>\n<br/>\n\n## State\n### Problem:\n\n### Solution:\n<!-- Codeblock start -->\n\\`\\`\\` python\nclass AtmState():\n\n\tname = \"state\"\n\tallowed = []\n\n\tdef goNext(self, state):\n\t\tif state.name in self.allowed:\n\t\t\tprint(\"Current State: \", self, \" switched to: \", state.name)\n\t\t\tself.__class__ = state\n\n\t\telse:\n\t\t\tprint(\"Current State: \", self, \" switching to: \", state.name, \" not possible!\")\n\n\tdef __str__(self):\n\t\treturn self.name\n\nclass Off(AtmState):\n\n\tname = \"off\"\n\tallowed = ['on']\n\nclass On(AtmState):\n\n\tname = \"on\"\n\tallowed = ['off']\n\nclass ATM():\n\t\n\tdef __init__(self):\n\t\tself.current = Off()\n\n\tdef setState(self, state):\n\t\tself.current.goNext(state)\n\ndef main():\n\tatm = ATM()\n\n\tatm.setState(On)\n\tatm.setState(Off)\n\tatm.setState(Off)\n\nif __name__ == \"__main__\":\n\tmain()\n\n\n\\`\\`\\`\n<!-- Codeblock end -->\n<br/>\n<br/>\n\n## Template\n### Problem:\n\n### Solution:\n<!-- Codeblock start -->\n\\`\\`\\` python\nimport sys\n\nfrom abc import ABC, abstractmethod\n\nclass AbstractClass(ABC):\n#This class inherit from Abstract Base Class to allow the use of the @abstractmethod decorator\n    \n\tdef template_method(self):\n\t\t\"\"\"Ths is the template method that contains a collection of \n\t\tmethods to stay the same, to be overriden, and to be overriden optionally.\n\t\t\"\"\"\n\n\t\tself.__always_do_this()\n\t\tself.do_step_1()\n\t\tself.do_step_2()\n\t\tself.do_this_or()\n\n\tdef __always_do_this(self):\n\t\t#This is a protected method that should not be overriden.\n\n\t\tname = sys._getframe().f_code.co_name\n\t\tprint('{}.{}'.format(self.__class__.__name__, name))\n\n\t@abstractmethod\n\tdef do_step_1(self):\n\t\t#This method should be overriden\n\t\tpass\n\n\t@abstractmethod\n\tdef do_step_2(self):\n\t\t#This method should be overriden\n\t\tpass\n\n\tdef do_this_or(self):\n\t\tprint('You can overide me but you do not have to')\n\nclass ConcreteClassA(AbstractClass):\n#This class inherits from the Abstract class featuring the template method. \n\n\tdef do_step_1(self):\n\t\tprint('Doing step 1 for ConcreteClassA ...')\n\n\tdef do_step_2(self):\n\t\tprint('Doing step 2 for ConcreteClassA ...')\n\nclass ConcreteClassB(AbstractClass):\n#This class inherits from the Abstract class featuring the template method.\n\n\tdef do_step_1(self):\n\t\tprint('Doing step 1 for ConcreteClassB ...')\n\n\tdef do_step_2(self):\n\t\tprint('Doing step 2 for ConcreteClassB ...')\n\n\tdef do_this_or(self):\n\t\tprint('Doing my own business ...')\n\ndef main():\n\tprint('==ConcreteClassA==')\n\ta = ConcreteClassA()\n\ta.template_method()\n\n\tprint('==ConcreteClassB==')\n\tb = ConcreteClassB()\n\tb.template_method()\n\nif __name__ == '__main__':\n\tmain()\n\n\\`\\`\\`\n<!-- Codeblock end -->\n<br/>\n<br/>\n`;\n","import { StyleSheet } from 'react-native';\n\nexport default StyleSheet.create({\n  container: {\n    paddingTop: 5,\n    paddingBottom: 5,\n    minWidth: '50%',\n  },\n});\n","import React, { useState, useEffect } from 'react';\nimport { Button, ScrollView, View } from 'react-native';\nimport { fetchNoteSubjects, fetchNotesData } from '../../utils/fetchTools';\nimport localNotes from '../../localData/localNotesManifest';\nimport stripHTMLFromString from '../../utils/stripHTMLFromString';\nimport makeArrayUnique from '../../utils/returnUniqueArray';\nimport menuStyles from '../../styles/menu';\nimport buttonStyles from '../../styles/button';\n\nconst useEffectCallback = (setOnlineNotes) => {\n  (async () => {\n    const onlineNoteSubjects = await fetchNoteSubjects();\n    setOnlineNotes(() => onlineNoteSubjects);\n  })();\n};\n\nconst MenuButtons = ({ titles, onlineNotes, onPressHandler }) =>\n  titles.map((title) => (\n    <View style={buttonStyles.container} key={`${title}_view`}>\n      <Button\n        title={title in onlineNotes ? title : `${title} (local)`}\n        onPress={() => onPressHandler(title)}\n        key={`${title}_button`}\n        style={buttonStyles.button}\n      />\n    </View>\n  ));\n\nexport default ({ viewerCallback }) => {\n  const [onlineNotes, setOnlineNotes] = useState({});\n\n  useEffect(() => useEffectCallback(setOnlineNotes), []);\n  const titles = () => {\n    const mergedNotesTitles = [...Object.keys(onlineNotes), ...Object.keys(localNotes)];\n    return makeArrayUnique(mergedNotesTitles);\n  };\n\n  const onPressHandler = async (selectedTitle) => {\n    // Loading selected markdown data before navigation for better experience\n\n    const isNoteOnline = selectedTitle in onlineNotes;\n\n    if (isNoteOnline) {\n      const url = onlineNotes[selectedTitle].url;\n      return viewerCallback({\n        title: selectedTitle,\n        markdownData: await fetchNotesData(url),\n      });\n    }\n\n    return viewerCallback({\n      title: selectedTitle,\n      markdownData: stripHTMLFromString(localNotes[selectedTitle]),\n    });\n  };\n\n  return (\n    <ScrollView style={menuStyles.container}>\n      <MenuButtons titles={titles()} onlineNotes={onlineNotes} onPressHandler={onPressHandler} />\n    </ScrollView>\n  );\n};\n","'use strict';\n\nexport default (array) => [...new Set(array)];\n","import { StyleSheet } from 'react-native';\n\nexport default StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    paddingTop: '1%',\n  },\n});\n","import React, { useState, useEffect } from 'react';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport Menu from './Menu';\nimport styles from '../../styles/container';\n\nexport default ({ navigation }) => {\n  const viewerCallback = (viewerData) => navigation.push('Viewer', viewerData);\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <Menu viewerCallback={viewerCallback} />\n    </SafeAreaView>\n  );\n};\n","// https://medium.com/young-developer/react-markdown-code-and-syntax-highlighting-632d2f9b4ada\n// https://www.npmjs.com/package/react-syntax-highlighter\nimport React from 'react';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { atomDark as highlightingStyle } from 'react-syntax-highlighter/dist/esm/styles/prism';\n\nexport default {\n  code({ node, inline, className, children, ...props }) {\n    const match = /language-(\\w+)/.exec(className || '');\n    return !inline && match ? (\n      <SyntaxHighlighter\n        style={highlightingStyle}\n        language={match[1]}\n        PreTag=\"div\"\n        children={String(children).replace(/\\n$/, '')}\n        {...props}\n      />\n    ) : (\n      <code className={className} {...props} />\n    );\n  },\n};\n","import { Platform } from 'react-native';\n\nconst { OS } = Platform;\n\nexport const isWeb = OS === 'web';\nexport const isiOS = OS === 'ios';\nexport const isAndroid = OS === 'android';\nexport const isMacOS = OS === 'macos';\nexport const isWindows = OS === 'windows';\n\nexport const isMobileDevice = isiOS || isAndroid;\nexport const isDesktopDevice = isMacOS || isWindows;\nexport const isNativeDevice = isMobileDevice || isDesktopDevice;\n","import React from 'react';\nimport MarkdownNative from 'react-native-markdown-display';\nimport MarkdownWeb from 'react-markdown';\nimport highlighter from './markdownHighlighter';\nimport { isNativeDevice } from '../../utils/platformDetector';\n// import { Prism } from 'react-syntax-highlighter';\n// import { dark } from 'react-syntax-highlighter/dist/esm/styles/prism';\n\nexport default ({ children: markdownData }) =>\n  isNativeDevice ? (\n    <MarkdownNative>{markdownData}</MarkdownNative>\n  ) : (\n    <>\n      {/* <Prism language=\"markdown\" style={dark}>\n        {markdownData}\n      </Prism> */}\n      <MarkdownWeb components={highlighter}>{markdownData}</MarkdownWeb>\n    </>\n  );\n","import React from 'react';\nimport { ScrollView } from 'react-native';\nimport MarkdownRenderer from './MarkdownRenderer';\n\nexport default ({ route, navigation }) => {\n  const { markdownData } = route.params;\n\n  return (\n    <ScrollView\n      contentInsetAdjustmentBehavior=\"automatic\"\n      contentContainerStyle={{\n        paddingHorizontal: '5%',\n      }}\n    >\n      <MarkdownRenderer>{markdownData}</MarkdownRenderer>\n    </ScrollView>\n  );\n};\n","import React from 'react';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport 'react-native-gesture-handler';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport MainPage from './screens/MainPage';\nimport Viewer from './screens/ViewerPage';\n\nconst Stack = createStackNavigator();\n\n/**\n *\n * TODOS:\n * implement redux\n * clean up navigation drilling\n *\n */\n\nexport default function App() {\n  return (\n    <SafeAreaProvider>\n      <NavigationContainer>\n        <Stack.Navigator\n          screenOptions={{\n            // headerStyle: { backgroundColor: '#1E88FF' },\n            // headerShown: false,\n            headerTitleStyle: { alignSelf: 'center' },\n            headerBackTitleStyle: {},\n          }}\n        >\n          <Stack.Screen\n            name=\"Home\"\n            component={MainPage}\n            options={{\n              title: 'Notes',\n            }}\n          />\n          <Stack.Screen\n            name=\"Viewer\"\n            component={Viewer}\n            options={({\n              route: {\n                params: { title },\n              },\n            }) => ({ title })}\n          />\n        </Stack.Navigator>\n      </NavigationContainer>\n    </SafeAreaProvider>\n  );\n}\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function () {\n    navigator.serviceWorker\n      .register('/expo-service-worker.js', { scope: '/' })\n      .then(function (info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function (error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n"],"sourceRoot":""}
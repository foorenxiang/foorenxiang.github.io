{"version":3,"sources":["utils/fetchTools.js","utils/constants.js","utils/isURL.js","utils/stripHTMLFromString.js","styles/button.js","screens/MainPage/Menu.js","styles/container.js","screens/MainPage/index.js","screens/ViewerPage/index.js","App.js"],"names":["logError","err","url","console","error","fetchText","a","async","fetch","response","text","textData","fetchJSON","json","data","fetchNoteSubjects","noteSubject","notes","title","_","startCase","URI","str","markdownURL","RegExp","test","fetchMarkdownData","markdownData","toString","replace","StyleSheet","create","container","paddingTop","paddingBottom","minWidth","cachedData","MenuButtons","titles","onPressHandler","map","View","style","buttonStyles","key","Button","onPress","button","viewerCallback","useState","setNotes","useEffect","useEffectCallback","menuStyles","Object","keys","selectedTitle","flex","alignItems","justifyContent","navigation","SafeAreaView","styles","Menu","viewerData","push","route","params","ScrollView","contentInsetAdjustmentBehavior","contentContainerStyle","paddingHorizontal","Stack","createStackNavigator","App","NavigationContainer","Navigator","screenOptions","headerTitleStyle","alignSelf","headerBackTitleStyle","Screen","name","component","MainPage","options","Viewer"],"mappings":"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","file":"static/js/app.8c49b945.chunk.js","sourcesContent":["import { SERVED_NOTES_URL, NOTES_REPOSITORY_URL } from './constants';\nimport _ from 'lodash';\nimport isURL from './isURL';\nimport stripHTMLFromString from './stripHTMLFromString';\n\nconst logError = (err, url) => {\n  console.error(err);\n  console.error(`Failed to load data from ${url}`);\n};\n\nexport const fetchText = async (url) => {\n  try {\n    const response = await fetch(url);\n    const textData = await response.text();\n    return textData;\n  } catch (err) {\n    logError(err, url);\n    return '';\n  }\n};\n\nexport const fetchJSON = async (url) => {\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    return data;\n  } catch (err) {\n    logError(err, url);\n    return {};\n  }\n};\n\nexport const fetchNoteSubjects = async () => {\n  const data = await fetchJSON(SERVED_NOTES_URL);\n  const notes = {};\n  for (const noteSubject in data) {\n    const title = _.startCase(noteSubject);\n    const URI = data[noteSubject];\n    const markdownURL = isURL(URI) ? URI : `${NOTES_REPOSITORY_URL}${URI}`;\n    notes[noteSubject] = {\n      title,\n      markdownURL,\n    };\n  }\n  return notes;\n};\n\nexport const fetchMarkdownData = async (markdownURL) => {\n  const markdownData = await fetchText(markdownURL);\n  return stripHTMLFromString(markdownData);\n};\n","export const SERVED_NOTES_URL = 'https://foorenxiang.github.io/static/servedNotes.json';\nexport const NOTES_REPOSITORY_URL = 'https://raw.githubusercontent.com/foorenxiang/notes/main/';\n","export default (str) => {\n  const pattern = new RegExp(\n    '^(https?:\\\\/\\\\/)?' + // protocol\n      '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|' + // domain name\n      '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))' + // OR ip (v4) address\n      '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*' + // port and path\n      '(\\\\?[;&a-z\\\\d%_.~+=-]*)?' + // query string\n      '(\\\\#[-a-z\\\\d_]*)?$',\n    'i'\n  ); // fragment locator\n  return !!pattern.test(str);\n};\n","'use strict';\n\n// referenced from https://www.geeksforgeeks.org/how-to-strip-out-html-tags-from-a-string-using-javascript/#:~:text=To%20strip%20out%20all%20the,innerText%20property%20from%20HTML%20DOM.\n\nexport default function removeTags(str) {\n  if (str === null || str === '') return '';\n  else str = str.toString();\n\n  // Regular expression to identify HTML tags in\n  // the input string. Replacing the identified\n  // HTML tag with a null string.\n  return str.replace(/(<([^>]+)>)/gi, '');\n}\n","import { StyleSheet } from 'react-native';\n\nexport default StyleSheet.create({\n  container: {\n    paddingTop: 5,\n    paddingBottom: 5,\n    minWidth: '50%',\n  },\n});\n","import React, { useState, useEffect } from 'react';\nimport { Button, View } from 'react-native';\nimport { fetchNoteSubjects, fetchMarkdownData } from '../../utils/fetchTools';\nimport menuStyles from '../../styles/menu';\nimport buttonStyles from '../../styles/button';\n\nconst cachedData = {\n  // screenName: {\n  //   screen: 'screen title',\n  //   markdownData: '',\n  // },\n};\n\nconst useEffectCallback = (setNotes) => {\n  (async () => {\n    const data = await fetchNoteSubjects();\n    setNotes(() => data);\n  })();\n};\n\nconst MenuButtons = ({ titles, onPressHandler }) =>\n  titles.map((title) => (\n    <View style={buttonStyles.container} key={`${title}_view`}>\n      <Button\n        title={title}\n        onPress={() => onPressHandler(title)}\n        key={`${title}_button`}\n        style={buttonStyles.button}\n      />\n    </View>\n  ));\n\nexport default ({ viewerCallback }) => {\n  const [notes, setNotes] = useState(cachedData);\n\n  useEffect(() => useEffectCallback(setNotes), []);\n  const titles = () => Object.keys(notes);\n\n  const onPressHandler = async (selectedTitle) => {\n    const markdownURL = notes[selectedTitle].markdownURL;\n    return viewerCallback({\n      title: selectedTitle,\n      markdownData: await fetchMarkdownData(markdownURL),\n    });\n  };\n\n  return (\n    <View style={menuStyles.container}>\n      <MenuButtons titles={titles()} onPressHandler={onPressHandler} />\n    </View>\n  );\n};\n","import { StyleSheet } from 'react-native';\n\nexport default StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    paddingTop: '1%',\n  },\n});\n","import React, { useState, useEffect } from 'react';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport Menu from './Menu';\nimport styles from '../../styles/container';\n\nexport default ({ navigation }) => {\n  const viewerCallback = (viewerData) => navigation.push('Viewer', viewerData);\n\n  return (\n    <>\n      <SafeAreaView style={styles.container}>\n        <Menu viewerCallback={viewerCallback} />\n      </SafeAreaView>\n    </>\n  );\n};\n","import React from 'react';\nimport { ScrollView } from 'react-native';\nimport Markdown from 'react-native-markdown-display';\n\nexport default ({ route, navigation }) => {\n  const { markdownData } = route.params;\n\n  return (\n    <ScrollView\n      contentInsetAdjustmentBehavior=\"automatic\"\n      contentContainerStyle={{\n        paddingHorizontal: '5%',\n      }}\n    >\n      <Markdown>{markdownData}</Markdown>\n    </ScrollView>\n  );\n};\n","import React from 'react';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport 'react-native-gesture-handler';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport MainPage from './screens/MainPage';\nimport Viewer from './screens/ViewerPage';\n\nconst Stack = createStackNavigator();\n\n/**\n *\n * TODOS:\n * implement redux\n * clean up navigation drilling\n *\n */\n\nexport default function App() {\n  return (\n    <SafeAreaProvider>\n      <NavigationContainer>\n        <Stack.Navigator\n          screenOptions={{\n            // headerStyle: { backgroundColor: '#1E88FF' },\n            // headerShown: false,\n            headerTitleStyle: { alignSelf: 'center' },\n            headerBackTitleStyle: {},\n          }}\n        >\n          <Stack.Screen\n            name=\"Home\"\n            component={MainPage}\n            options={{\n              title: 'Notes',\n            }}\n          />\n          <Stack.Screen\n            name=\"Viewer\"\n            component={Viewer}\n            options={({\n              route: {\n                params: { title },\n              },\n            }) => ({ title })}\n          />\n        </Stack.Navigator>\n      </NavigationContainer>\n    </SafeAreaProvider>\n  );\n}\n"],"sourceRoot":""}